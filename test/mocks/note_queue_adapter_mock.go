// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/adapters/note_queue_adapter.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/adapters/note_queue_adapter.go -destination=test/mocks/note_queue_adapter_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/dock-tech/notes-api/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockNoteQueue is a mock of NoteQueue interface.
type MockNoteQueue struct {
	ctrl     *gomock.Controller
	recorder *MockNoteQueueMockRecorder
	isgomock struct{}
}

// MockNoteQueueMockRecorder is the mock recorder for MockNoteQueue.
type MockNoteQueueMockRecorder struct {
	mock *MockNoteQueue
}

// NewMockNoteQueue creates a new mock instance.
func NewMockNoteQueue(ctrl *gomock.Controller) *MockNoteQueue {
	mock := &MockNoteQueue{ctrl: ctrl}
	mock.recorder = &MockNoteQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteQueue) EXPECT() *MockNoteQueueMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNoteQueue) Publish(ctx context.Context, note entities.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNoteQueueMockRecorder) Publish(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNoteQueue)(nil).Publish), ctx, note)
}
