// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/adapters/create_note_repository_adapter.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/adapters/create_note_repository_adapter.go -destination=test/mocks/create_note_repository_adapter_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/dock-tech/notes-api/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateNoteRepository is a mock of CreateNoteRepository interface.
type MockCreateNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateNoteRepositoryMockRecorder
	isgomock struct{}
}

// MockCreateNoteRepositoryMockRecorder is the mock recorder for MockCreateNoteRepository.
type MockCreateNoteRepositoryMockRecorder struct {
	mock *MockCreateNoteRepository
}

// NewMockCreateNoteRepository creates a new mock instance.
func NewMockCreateNoteRepository(ctrl *gomock.Controller) *MockCreateNoteRepository {
	mock := &MockCreateNoteRepository{ctrl: ctrl}
	mock.recorder = &MockCreateNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateNoteRepository) EXPECT() *MockCreateNoteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateNoteRepository) Create(ctx context.Context, note entities.Note) (*entities.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, note)
	ret0, _ := ret[0].(*entities.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreateNoteRepositoryMockRecorder) Create(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateNoteRepository)(nil).Create), ctx, note)
}
