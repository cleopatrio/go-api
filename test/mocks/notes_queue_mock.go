// Code generated by MockGen. DO NOT EDIT.
// Source: internal/integration/queues/notes_queue.go
//
// Generated by this command:
//
//	mockgen -source=internal/integration/queues/notes_queue.go -destination=test/mocks/notes_queue_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	gomock "go.uber.org/mock/gomock"
)

// MockSqsClient is a mock of SqsClient interface.
type MockSqsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSqsClientMockRecorder
	isgomock struct{}
}

// MockSqsClientMockRecorder is the mock recorder for MockSqsClient.
type MockSqsClientMockRecorder struct {
	mock *MockSqsClient
}

// NewMockSqsClient creates a new mock instance.
func NewMockSqsClient(ctrl *gomock.Controller) *MockSqsClient {
	mock := &MockSqsClient{ctrl: ctrl}
	mock.recorder = &MockSqsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqsClient) EXPECT() *MockSqsClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockSqsClient) SendMessage(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*sqs.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSqsClientMockRecorder) SendMessage(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSqsClient)(nil).SendMessage), varargs...)
}
